datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Workout {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int // in minutes
  difficulty  Int      @default(1)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user              User               @relation(fields: [userId], references: [id])
  exercises         WorkoutExercise[]
  scheduledWorkouts ScheduledWorkout[]
  CalendarEvent     CalendarEvent[]

  @@index([userId])
  @@map("workouts")
}

model WorkoutExercise {
  id         String @id @default(cuid())
  workoutId  String
  exerciseId String
  order      Int    @default(0)

  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id])

  sets WorkoutExerciseSet[]

  @@index([workoutId])
  @@index([exerciseId])
  @@map("workout_exercises")
}

model WorkoutExerciseSet {
  id                String @id @default(cuid())
  workoutExerciseId String
  reps              Int
  weight            Float?
  duration          Int?
  restTime          Int?
  order             Int    @default(0)

  workoutExercise WorkoutExercise @relation(fields: [workoutExerciseId], references: [id])

  @@index([workoutExerciseId])
  @@map("workout_exercise_set")
}

model WorkoutTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int
  difficulty  Int      @default(1)
  isSystem    Boolean  @default(false)
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user              User?              @relation(fields: [userId], references: [id])
  templateExercises TemplateExercise[]

  @@index([userId])
  @@map("workout_templates")
}

model TemplateExercise {
  id         String @id @default(cuid())
  templateId String
  exerciseId String
  order      Int    @default(0)

  template WorkoutTemplate @relation(fields: [templateId], references: [id])
  exercise Exercise        @relation(fields: [exerciseId], references: [id])

  sets TemplateExerciseSet[] // ðŸ‘ˆ Yeni iliÅŸki

  @@index([templateId])
  @@index([exerciseId])
  @@map("template_exercises")
}

model TemplateExerciseSet {
  id                 String @id @default(cuid())
  templateExerciseId String
  reps               Int
  weight             Float?
  duration           Int? // seconds
  restTime           Int?
  order              Int    @default(0)

  templateExercise TemplateExercise @relation(fields: [templateExerciseId], references: [id])

  @@index([templateExerciseId])
  @@map("template_exercise_set")
}

model User {
  id            String  @id @default(cuid())
  email         String  @unique
  height        Int?
  weight        Int?
  xp            Int     @default(0)
  firstName     String?
  lastName      String?
  age           String?
  weightUnit    String?
  heightUnit    String?
  fitnessGoal   String?
  activityLevel String?
  notes         String?

  level     Int      @default(1)
  onboarded Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workouts          Workout[]
  scheduledWorkouts ScheduledWorkout[]
  healthMetrics     HealthMetric[]
  nutritionLogs     NutritionLog[]
  exercises         Exercise[]
  calendarEvents    CalendarEvent[]
  WorkoutTemplate   WorkoutTemplate[]
  MuscleGroup       MuscleGroup[]

  @@map("users")
}

model ScheduledWorkout {
  id          String   @id @default(cuid())
  workoutId   String
  userId      String
  scheduledAt DateTime
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workout Workout @relation(fields: [workoutId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([workoutId])
  @@index([userId])
  @@map("scheduled_workouts")
}

model NutritionLog {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime @default(now())
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  meals Meal[]

  calendarEvent CalendarEvent?

  @@index([userId])
  @@map("nutrition_logs")
}

model Meal {
  id             String   @id @default(cuid())
  nutritionLogId String
  type           MealType
  calories       Int
  protein        Float?
  carbs          Float?
  fat            Float?
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  nutritionLog NutritionLog @relation(fields: [nutritionLogId], references: [id])

  @@index([nutritionLogId])
  @@map("meals")
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model HealthMetric {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  sleep     Float? // hours
  water     Int? // cups
  stress    Int? // 1-10
  energy    Int? // 1-10
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("health_metrics")
}

model Exercise {
  id              String   @id @default(cuid())
  name            String
  description     String?
  isSystem        Boolean  @default(false)
  userId          String?
  totalDifficulty Int      @default(1) // yeni eklendi
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user              User?                 @relation(fields: [userId], references: [id])
  muscleGroupLinks  ExerciseMuscleGroup[] // iliÅŸki many-to-many oldu
  workoutExercises  WorkoutExercise[]
  templateExercises TemplateExercise[]

  @@unique([name, userId])
  @@index([userId])
  @@map("exercises")
}

model ExerciseMuscleGroup {
  id            String      @id @default(cuid())
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  muscleGroup   MuscleGroup @relation(fields: [muscleGroupId], references: [id])
  muscleGroupId String
  difficulty    Int         @default(1)

  @@unique([exerciseId, muscleGroupId])
  @@index([muscleGroupId])
  @@map("exercise_muscle_group")
}

model MuscleGroup {
  id        String   @id @default(cuid())
  name      String
  isSystem  Boolean  @default(false)
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?                 @relation(fields: [userId], references: [id])
  exercises ExerciseMuscleGroup[]

  @@unique([name, userId])
  @@index([userId])
  @@map("muscle_groups")
}

model CalendarEvent {
  id          String    @id @default(cuid())
  userId      String
  type        EventType
  date        DateTime
  workoutId   String?
  nutritionId String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user      User          @relation(fields: [userId], references: [id])
  workout   Workout?      @relation(fields: [workoutId], references: [id])
  nutrition NutritionLog? @relation(fields: [nutritionId], references: [id])

  @@index([userId])
  @@index([workoutId])
  @@map("calendar_events")
}

enum EventType {
  WORKOUT
  NUTRITION
}
