// File structure:
// ├─ prisma/
// │  └─ schema.prisma       <-- Prisma schema file (outside src)
// └─ src/
//    ├─ lib/
//    │   └─ prisma.ts       <-- Prisma Client singleton

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  height    Int?     // height in cm
  weight    Int?     // weight in kg
  xp        Int      @default(0)
  firstName      String?
  lastName       String?
  age            String?
  weightUnit     String?
  heightUnit     String?
  fitnessGoal    String?
  activityLevel  String?
  notes          String?

  level     Int      @default(1)
  onboarded Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workouts           Workout[]
  scheduledWorkouts  ScheduledWorkout[]
  healthMetrics      HealthMetric[]
  nutritionLogs      NutritionLog[]
  exercises          Exercise[]

  @@map("users")
}

model Exercise {
  id          String      @id @default(cuid())
  name        String
  description String?
  muscleGroup MuscleGroup
  difficulty  Int         @default(1)
  isSystem    Boolean     @default(false)
  userId      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user            User?             @relation(fields: [userId], references: [id])
  workoutExercises WorkoutExercise[]

  @@map("exercises")
}

model Workout {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // in minutes
  difficulty  Int      @default(1)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user             User              @relation(fields: [userId], references: [id])
  exercises        WorkoutExercise[]
  scheduledWorkouts ScheduledWorkout[]

  @@map("workouts")
}

model WorkoutExercise {
  id         String @id @default(cuid())
  workoutId  String
  exerciseId String
  sets       Int    @default(1)
  reps       Int    @default(1)
  weight     Float? // in kg
  duration   Int?   // in seconds
  restTime   Int?   // in seconds
  order      Int    @default(0)

  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id])

  @@map("workout_exercises")
}

model ScheduledWorkout {
  id          String   @id @default(cuid())
  workoutId   String
  userId      String
  scheduledAt DateTime
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workout Workout @relation(fields: [workoutId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("scheduled_workouts")
}

model HealthMetric {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  sleep     Float?   // hours
  water     Int?     // cups
  stress    Int?     // 1-10
  energy    Int?     // 1-10
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("health_metrics")
}

model NutritionLog {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime @default(now())
  mealType    String   // breakfast, lunch, dinner, snack
  calories    Int
  protein     Float?
  carbs       Float?
  fat         Float?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("nutrition_logs")
}

enum MuscleGroup {
  CHEST
  BACK
  LEGS
  SHOULDERS
  ARMS
  CORE
  CARDIO
  FULL_BODY
}


